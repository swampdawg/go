[ -z "$F_GO" ] && {
	F_GO="f_go"
###############################################################################
##~~~2do: aim toward losing this backward compat.
[ -z "$GOSUB" ] && {
        GOSUB=$SUB
        echo "$NAM: Script needs updating (GOSUB)" 1>&2
}
##
.	"$GOSUB/f_var"
.	"$GOSUB/f_trap"
.	"$GOSUB/f_tmp"
###############################################################################
# This file requires 'bash' rather than 'sh'
###############################################################################
F_GO_TIME_B=0
F_GO_TIME_E=0
: ${F_GO_INS_ACTION:="install"}
F_GO_TMPFS=
F_GO_SAVFS=
F_GO_SDIR=
: ${F_GO_NOTAR:=""}	#set non-null to ignore tarball at end
: ${F_GO_TEE:="tee"}	#set might want to add "-a" for debug wierd builds
###############################################################################
f_go_wrn ()
{
 local  r=$(eval echo "$""$1")

 [ -z "$r" ] && {
        echo "$NAM: \"$1\" not set!" 1>&2
        return 1 
 }

 return 0
}

f_go_err ()
{
 local  r=$(eval echo "$""$1")

 [ -z "$r" ] && {
        echo "$NAM: \"$1\" not set!" 1>&2
        exit 1
 }
 
 return 0
}
###############################################################################
f_go_CWD ()
{
 CWD=`pwd`
}

# set the INS variable (eg: /usr/local/GCC)..
f_go_INS ()
{
 [ $# -lt 1 ] && {
	echo "$NAM: f_go_INS: \$PKG" 1>&2
	exit 1
 }
 : ${INS:="/usr/local/"`awk '{print toupper($0)}' <<< "$1"`}
}

# set the SRC variable (eg: gcc-8.2.0)..
#~~~ [ $# -lt 2 ] here?
f_go_SRC ()
{
 : ${SRC:="$1"-"$2"}
 [ -z "$SRC" ] && {
	echo "*** warning - \$SRC is not set!" 1>&2
	echo "*** (using $1-$2)" 1>&2
 }
}

# set the PFX variable (eg: /usr/local/GCC/8.2.0)..
f_go_PFX ()
{
 [ $# -lt 3 ] && {
	echo "$NAM: f_go_PFX: \$INS \$SRC \$PKG" 1>&2
	exit 1
 }
 : ${PFX:=$(echo "$1""/"`echo "$2" | sed -e "s/$3-//"`)}
}

#~~~incomplete
f_go_GEN ()
{
 : ${GEN:="$SRC"}
}

# set the OBJ variable (eg: obj-gcc-8.2.0)
f_go_OBJ ()
{
 [ $# -lt 1 ] && {
	echo "$NAM: f_go_OBJ: \$OBJ" 1>&2
	exit 1
 }
 : ${OBJ:="obj-""$1"}
}
###############################################################################
f_go_lwr ()
{
 echo "$1" | awk '{print tolower($0);}'
}

f_go_upr ()
{
 echo "$1" | awk '{print toupper($0);}'
}

f_go_req_ver ()
{
 egrep "^""$1" "$CWD""/""$SRC"".req" | awk -F'-' '{print $NF}'
}

# number of cores..
f_go_nproc ()
{
 nproc
}

# reasonable number of build cores..
f_go_bproc ()
{
 echo $((`f_go_nproc` -1))
}

# fudge (written in seconds!)..
f_go_os ()
{
 case `uname -s` in
	Linux)
	[ -f /etc/redhat-release ] && {
		cat /etc/redhat-release | awk '{print $1}'
		return 0
	}
	[ -f /etc/os-release ] && {
		cat /etc/os-release | egrep "^ID=" | awk -F '=' '{print $NF}'
		return 0
	}
	return $F_VAR_ERR
	;;

	*)
	uname -o
	;;
 esac
}

f_go_os_ver ()
{
 case `uname -s` in
	Linux)
	[ -f /etc/redhat-release ] && {
		cat /etc/redhat-release | \
		sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p'
		return 0
	}
	[ -f /etc/os-release ] && {
		cat /etc/os-release | \
		egrep "^VERSION_ID=" | awk -F '=' '{print $NF}' | \
		sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p'
		return 0
	}
	return $F_VAR_ERR
	;;

	CYGWIN*)
	uname -r | sed -e 's/(.*//'
	;;

	*)
	return $F_VAR_ERR
	;;
 esac
}

f_go_os_arch ()
{
 case `uname -m` in
	*64*)
	echo "64"
	;;

	*)
	echo "32"
	;;
 esac
}

f_go_os_nam ()
{
 local	r

 r=$( \
	cat /etc/os-release | \
	egrep "^VERSION_CODENAME=" | \
	awk -F'=' '{print $2}' \
 )
 [ -z "$r" ] && r="unknown"

 echo "$r"
}

f_go_syscc_cfg ()
{
 local i

 gcc -v 2>&1 | \
 egrep "Configured[[:space:]]{1,}with:" | \
 sed -e 's/--/\n--/g' | \
 egrep -v "Configured[[:space:]]{1,}with:"
}

f_go_tuple ()
{
 local	r

 [ -z "$1" ] &&	{
	[ -z "$CC" ] && {
		echo "f_go_tuple: needs CC set if called with null!" 1>&2
		exit $F_VAR_ERR
 	}

	"$CC" -v 2>&1 | grep "^Target:" | awk '{print $NF}'
	return $?
 }

 case "$2" in
	pfx)
	echo "$1" | awk -F'-' '{print $1}'
	;;

	sfx)
	r=$(echo "$1" | awk -F'-' '{print $1}')
	echo "$1" | sed -e "s,$r-,,"
	;;

	*)
	echo "f_go_tuple: [ tuple ] [ pfx | sfx ]!" 1>&2
	exit $F_VAR_ERR	
	;;
 esac
}

f_go_tmpfs ()
{
 local	opt="defaults,mode=744,size=""$F_GO_TMPFS"
 local	r

 [ $# -lt 2 ] && {
	echo "f_go_tmpfs: [ action ] $OBJ|$SRC" 1>&2
	exit 1
 }

 case "$1" in
	ismounted)
	[ -d "$2" ] || return 1
	r=$(sudo mount | egrep "^tmpfs[[:space:]]" | grep "$2"[[:space:]])
	! [ -z "$r" ]
	;;

	init)
	mkdir -p "$2" || exit 1
	if $(f_go_tmpfs ismounted "$2"); then return;fi
	[ -z "$F_GO_TMPFS" ] && return
	sudo mount -t tmpfs -o "$opt" tmpfs "$2" || exit 1
	f_go_chown "$2" 
	;;

	term)
	rm -rf "$2" 2>/dev/null
	if ! $(f_go_tmpfs ismounted "$2"); then return;fi
	sudo umount "$2" || exit 1
	rmdir "$2" | exit 1
	[ -z "$F_GO_SAVFS" ] && return
	rm -rf "$2"".tmpfs"
	;;

	save)
	mkdir -p "$2"".tmpfs" || exit 1
	sudo rsync -auHx "$2""/" "$2"".tmpfs""/" || exit 1
	;;

	load)
	mkdir -p "$2"".tmpfs" || exit 1
	sudo rsync -auHx "$2"".tmpfs""/" "$2""/" || exit 1
	;;

	trash-saves)
	rm -rf "$2"".tmpfs"
	;;

	*)
	;;
 esac
}

# initialise defaults and variables which are not already defined..
f_go_init ()
{
 [ -z "$PKG" ] && {
	echo "$NAM: f_go_init: PKG is not defined (eg: gcc)" 1>&2
	exit $F_VAR_ERR
 }
 [ -z "$VER" ] && {
	echo "$NAM: f_go_init: VER is not defined (eg: 8.2.0)" 1>&2
	exit $F_VAR_ERR
 }

 f_go_CWD
 f_go_INS "$PKG"
 f_go_SRC "$PKG" "$VER"
 f_go_PFX "$INS" "$SRC" "$PKG"
 f_go_GEN
 f_go_OBJ "$SRC"

 mkdir -p \
 "log/hlp" \
 "log/cfg" \
 "log/mak" \
 "log/ins" \
 "log/tst" || exit $F_VAR_ERR
}

# figure out tarball from newest compression type backward..
f_go_arc_d ()
{
 local	e x

 if [ -f "$1"".tar.xz" ];	then e=".tar.xz";	x="J"
 elif [ -f "$1"".tar.bz2" ];	then e=".tar.bz2";	x="j"
 elif [ -f "$1"".tar.gz" ];	then e=".tar.gz";	x="z"
 elif [ -f "$1"".tar" ];	then e=".tar";		x=""
 fi

 f_go_tmpfs init "$SRC"
 tar xv"$x"f "$1""$e" || exit $F_VAR_ERR
}

# unpack tarball or make one from SRC..
f_go_arc ()
{
 local	i

 case "$1" in
	-d)
	f_go_arc_d "$2"
	for i in "$SRC"".patch".???
	do
		[ -f "$i" ] || continue;
		patch -p0 < "$i"
	done
	;;

	-z)
	local	f="$2"".tar.xz"
	[ -f "$f" ] && {
		echo "$NAM: f_go_arc: tarball $f exists!" 1>&2
		exit 1
	}
	tar cvJf "$f" "$2""/" || exit $F_VAR_ERR
	;;

	*)
	echo "$NAM: f_go_arc [-d|-z] \$SRC" 1>&2
	exit $F_VAR_ERR
	;;
 esac
}

f_go_hlp ()
{
 ./"$SRC""$F_GO_SDIR""/configure" --help 2>&1 | $F_GO_TEE "$CWD""/log/hlp/hlp.""$SRC"".log"
}

#~~~hmm..
f_go_gen ()
{
# local	amARGS
#
# [ -f "$SRC/missing" ] || amARGS="--add-missing"
# ( \
# cd "$GEN" && \
# aclocal && \
# autoheader && \
# automake $amARGS && \
# autoconf \
# ) || exit $F_VAR_ERR

 (
 cd "$SRC" && \
 autoreconf --install "$@"
 )
}

# configure SRC for build in OBJ..
f_go_cfg ()
{
 local	pfx

 [ -z "$PFX" ] || {
	pfx="--prefix=""$PFX"
 }

 ( \
 f_go_tmpfs init "$OBJ"
# mkdir -p "$OBJ" || exit 1
 cd "$OBJ" && \
 "../""$SRC""$F_GO_SDIR""/configure" $pfx $CFG "$@" 2>&1 | \
 $F_GO_TEE "$CWD""/log/cfg/cfg.""$SRC"".log"
 [ ${PIPESTATUS[0]} -eq 0 ] || return 1
 ) || exit $F_VAR_ERR
 [ -z "$F_GO_SAVFS" ] || f_go_tmpfs save "$SRC"
}


f_go_ccfg ()
{
 local	pfx="$PFX"

 [ -z "$pfx" ] || {
	pfx="-DCMAKE_INSTALL_PREFIX=""$PFX"
 }

 (
 f_go_tmpfs init "$OBJ"
# mkdir -p "$OBJ" || exit 1
 cd "$OBJ" && \
 cmake "$@" $CFG $pfx "../$SRC" 2>&1 | \
 $F_GO_TEE "$CWD""/log/cfg/cfg.""$SRC"".log"
 [ ${PIPESTATUS[0]} -eq 0 ] || return 1
 ) || exit 1
 [ -z "$F_GO_SAVFS" ] || f_go_tmpfs save "$SRC"
}

# build in OBJ..
f_go_mak ()
{
 [ -z "$F_GO_SAVFS" ] || f_go_tmpfs load "$OBJ"
 ( \
 cd "$OBJ" && \
 make "$@" 2>&1 | \
 $F_GO_TEE "$CWD""/log/mak/mak.""$SRC"".log"
 [ ${PIPESTATUS[0]} -eq 0 ] || return $F_VAR_ERR
 ) || exit $F_VAR_ERR
 [ -z "$F_GO_SAVFS" ] || f_go_tmpfs save "$OBJ"
}

f_go_cmak ()
{
 [ -z "$F_GO_SAVFS" ] || f_go_tmpfs load "$OBJ"
 ( \
 cd "$OBJ" && \
 cmake --build "." "$@" 2>&1 | \
 $F_GO_TEE "$CWD""/log/mak/mak.""$SRC"".log"
 [ ${PIPESTATUS[0]} -eq 0 ] || return $F_VAR_ERR
 ) || exit $F_VAR_ERR
 [ -z "$F_GO_SAVFS" ] || f_go_tmpfs save "$OBJ"
}

# install to PFX..
f_go_ins ()
{
 ( \
 cd "$OBJ" && \
# echo make "$@" "$F_GO_INS_ACTION"
 make "$@" "$F_GO_INS_ACTION" 2>&1 | \
 $F_GO_TEE "$CWD""/log/ins/ins.""$SRC"".log"
 [ ${PIPESTATUS[0]} -eq 0 ] || return $F_VAR_ERR
 ) || exit $F_VAR_ERR
}

f_go_cins ()
{
 ( \
 cd "$OBJ" && \
 cmake --install "." "$@" 2>&1 | \
 $F_GO_TEE "$CWD""/log/ins/ins.""$SRC"".log"
 [ ${PIPESTATUS[0]} -eq 0 ] || return $F_VAR_ERR
 ) || exit $F_VAR_ERR
}

# uninstall from PFX
f_go_rem ()
{
 ( \
 cd "$OBJ" && \
 make "$@" uninstall
 ) || exit $F_VAR_ERR
}

# remove OBJ, SRC or both..
f_go_del ()
{
 if test x"$1" = x"$F_GO_DEL" -o x"$F_GO_DEL" = x"all"; then return 0; fi

 case "$1" in
	obj)
	f_go_tmpfs term "$OBJ"
#	rm -rf "$OBJ"
	;;

	src)
	f_go_tmpfs term "$SRC"
#	rm -rf "$SRC"
	;;

	log)
	rm -rf "$CWD""/log/"
	;;

	all)
	f_go_del obj
	f_go_del src
	;;

	*)
	;;
 esac
}

f_go_tar_tarname ()
{
 local	h o v n

 h=`hostname`
 o=`f_go_os`
 v=`f_go_os_ver`
 n=`f_go_os_nam`

 echo "$CWD""/BIN/""$PKG""-(""$h""-""$o""-""$v""-""$n"")-""$VER""-bin.tar.xz"
}

f_go_tar ()
{
 local	x=`f_go_tar_tarname`
 local	t=`echo "$x" | sed -e 's/\.xz//'`

 mkdir -p "$CWD""/BIN" || exit 1
 [ -z "$F_GO_NOTAR" ] || return $F_GO_OKI
#tar cvJf "$t" --exclude='lost+found' -C / $(readlink -m "$PFX")
 rm -vf "$x" "$t"
 tar cvf "$t" --exclude='lost+found' -C / $(readlink -m "$PFX") || exit 1
 xz -zvT `f_go_bproc` "$t" || {
	rm -v "$t"
	exit 1
 }
}

f_go_chmod ()
{
 [ $# -lt 2 ] && {
	echo "$NAM: f_go_chmod [perm] [item]" 1>&2
	echo "$NAM: f_go_chmod $@" 1>&2
	exit $F_VAR_ERR
 }
 sudo -E chmod "$1" "$2"
}

f_go_chown ()
{
 [ $# -lt 1 ] && {
	echo "$NAM: f_go_chown [item]" 1>&2
	echo "$NAM: f_go_chown $@" 1>&2
	exit $F_VAR_ERR
 }
 sudo -E chown `id -un`:`id -gn` "$1"
}

f_go_rsync ()
{
 local  n=`basename "$CWD"`
 local  d=`dirname "$CWD"`
 local	f="$NAM"".rsync"

 [ -z "$1" ] && {
        echo "$NAM: fcp_rsync [ user@host ]" 1>&2
        exit 1
 }
 [ -f "$f" ] || {
	echo "$NAM: fcp_rsync needs file $f!" 1>&2
	exit 1
 }

 (
 cd .. || exit 1
 rsync --progress -auxv \
        --exclude-from="$CWD""/""$f" \
        './'"$n" "$1":"$d""/"
 )
}
###############################################################################
f_go_here ()
{
 tar --to-stdout -xf "$GOSUB/go.tar"
}

f_go_time_b ()
{
 F_GO_TIME_B=`date "+%s"`
}

f_go_time_e ()
{
 F_GO_TIME_E=`date "+%s"`
}

f_go_time_be ()
{
 echo $(($F_GO_TIME_E - $F_GO_TIME_B))
}

f_go_time ()
{
 local	x

 echo "($NAM: "`f_go_time_be`" seconds)" 1>&2
 [ `which sdtimetool` ] || {
	echo "$F_GO: !WRN: No sdtimetool!" 1>&2
	return $F_VAR_OKI
 }
 x=$(sdtimetool --add "19700101000000" `f_go_time_be`)
 echo "($NAM: "`sdtimetool --as-dhms "$x"`")" 1>&2
}
###############################################################################

# gcc build specific..


#GMP= etc, grab value
f_go_gcc_req0_val ()
{
 egrep "$2""=" "$1" | awk -F'=' '{print $NF}'
}

#tarball compression differs, grab each wget
f_go_gcc_req0_url ()
{
 local  v=`f_go_gcc_req0_val "$1" "$2"`

 egrep "wget[[:space:]].*$2" "$1" | \
 awk '{print $2}' | \
 sed -e "s/\$$2/$v/"
}

#older format download_prerequisites
f_go_gcc_req0 ()
{
 local  f="$1"
 local  u i

 mkdir -p "$REQ" || exit 1
 rm -f "$SRC"".req"
 for i in MPFR GMP MPC ISL CLOOG
 do
	u=`f_go_gcc_req0_url "$f" "$i"`
	[ -z "$u" ] && continue

	i=`echo "$u" | awk -F'/' '{print $NF}'`
	[ -f "$REQ""/""$i" ] || {
		wget -O "$REQ""/""$i" "$u" || exit $F_VAR_ERR
	}
	echo "$i" | sed -e 's/\.tar\..*//' >> "$SRC"".req"
 done
}

#newer format download_prerequisites
f_go_gcc_req1 ()
{
 local  f="$1"
 local  u l i

 u=`egrep "^base_url=" "$f" | \
 awk -F '=' '{print $NF}' | awk -F"'" '{print $2}'`
 l=`egrep "^(gmp|mpfr|mpc|isl)=" "$f" | \
 awk -F '=' '{print $NF}' | awk -F"'" '{print $2}'`

 mkdir -p "$REQ" || exit 1
 rm -f "$SRC"".req"
 for i in ${l}
 do
	[ -f "$REQ""/""$i" ] || {
		wget -O "$REQ""/""$i" "$u""/""$i" || exit $F_VAR_ERR
	}
	echo "$i" | sed -e 's/\.tar\..*//' >> "$SRC"".req"
 done
}

#grab prequisites, if missing
f_go_gcc_req ()
{
 local  f="$SRC"/contrib/download_prerequisites
 local  u

 [ -z "$REQ" ] && {
	echo "$NAM: f_go_gcc_req REQ= not set!" 1>&2
	exit $F_VAR_ERR
 }

 u=`egrep "^base_url=" "$f" | \
 awk -F '=' '{print $NF}' | awk -F"'" '{print $2}'`
 [ -z "$u" ] && {
	f_go_gcc_req0 "$f"
	} || {
	f_go_gcc_req1 "$f"
 }
}

#return (possibly) system compiler version
f_go_gcc_ver ()
{
 local	spatt="[[:space:]]\(\([[:digit:]]\{1,\}\.\)\{2,\}[[:digit:]]\{1,\}\)[[:space:]].*"

 gcc -v 2>&1 | egrep "^gcc[[:space:]]" | sed -e "s/^gcc.*$spatt/\1/"
}

#return previous installed compiler from VER
#the system compiler version is added to the list, as is VER itself
#if VER is silly then the result will be
f_go_gcc_prev ()
{
 local	d=`dirname "$PFX"`
 local	r

 f_tmp_add

 echo "$VER" > `f_tmp_top`
 f_go_gcc_ver >> `f_tmp_top`
 ls -1 "$d" >> `f_tmp_top`
 r=$(cat `f_tmp_top` | uniq | sort -V | grep -B1 -F "$VER" | head -1)
 echo "$d""/""$r"

 f_tmp_rem
}

# build requisite $1 with config ${2..}
f_go_gcc_req_bld ()
{
 [ $# -lt 1 ] && {
	echo "$NAM: f_go_gcc_req_bld [gmp|mpfr|mpc|isl|cloog]" 1>&2
	exit $F_VAR_ERR
 }

 local	l=`echo "$1" | awk '{print tolower($0);}'`
 local	u=`echo "$1" | awk '{print toupper($0);}'`

 shift
 ( \
 export PKG="$l"
 export VER=`f_go_req_ver "$PKG"`
 [ -z "$VER" ] && return 0
 export PFX="$REQ""/""$u""/""$VER"
 [ -d "$PFX" ] || {
	cd "$REQ" && \
CFG="
$CFG
$@
"
	export CFG
	../go.req all || return $F_VAR_ERR
 }
 ) || return $F_VAR_ERR
}

#return a "--with-*=/some/path" entry dependent on $1
#eg --with-gmp=/home/foo/gcc/REQ/GMP/4.3.2
f_go_gcc_req_cfg ()
{
 [ $# -lt 1 ] && {
	echo "$NAM: f_go_gcc_req_cfg [gmp|mpfr|mpc|isl|cloog]" 1>&2
	exit $F_VAR_ERR
 }

 local	r=`f_go_req_ver "$1"`
 [ -z "$r" ] && return

 echo "--with-"`f_go_lwr "$1"`"=""$REQ""/"`f_go_upr "$1"`"/""$r"
}

#remove [obj|src|req] for prerequisites
f_go_gcc_req_del ()
{
 local	i

 case "$1" in
	req)
	for i in gmp mpfr mpc isl cloog
 	do
		rm -rf "$REQ""/"`f_go_upr "$i"`"/"`f_go_req_ver "$i"`
		rmdir "$REQ""/"`f_go_upr "$i"` 2>/dev/null
 	done
	rm -f "$PKG""-""$VER"".req"
	;;

	obj)
	for i in gmp mpfr mpc isl cloog
	do
		rm -rf "$REQ""/obj-"`f_go_lwr "$i"`"/"`f_go_req_ver "$i"`
 	done
	;;

	src)
	for i in gmp mpfr mpc isl cloog
	do
		rm -rf "$REQ""/"`f_go_lwr "$i"`"-"`f_go_req_ver "$i"`
 	done
	;;

	*)
	;;
 esac
}

#find viable distcc hosts using $CC or 'gcc' if $CC=nul appending localhost
#needs to ssh into each so this host must have pubkey on all targets or they
#will be skipped.
#eg: a@b c@d e@f/3
f_go_distcc_hosts ()
{
 local	i r x
 local	lhost ruser rhost dspec
 local	cc="$CC"
 local	host target

 [ -z "$cc" ] && cc="gcc"

 which "$cc" >/dev/null || exit $F_VAR_ERR
 host=$("$cc" -dumpmachine)
 lhost=$(hostname)

 while [ $# -gt 0 ]
 do
	echo "$1" | egrep -q "@"
	[ $? -eq 0 ] || {
		shift
		continue
	}
	ruser=$(echo "$1" | sed -e 's/@.*//')
	rhost=$(echo "$1" | sed -e 's/.*@//' -e 's,/.*,,')
	dspec=$(echo "$1" | sed -e 's,.*/,,' -e 's/[^[:digit:]]\{1,\}//')
	shift
	[ "$lhost" == "$rhost" ] && continue

	ping -q -c 1 "$rhost" >/dev/null 2>&1 || continue
	target=$( \
		ssh \
		-o UserKnownHostsFile=/dev/null \
		-o StrictHostKeyChecking=no \
		-o PasswordAuthentication=no \
		"$ruser"@"$rhost" \
		"$cc -dumpmachine" 2>/dev/null \
	)
	[ $? -ne 0 ] && continue

	host=$(echo "$host" | awk -F'-' '{print $1}')
	target=$(echo "$target" | awk -F'-' '{print $1}')

	[ "$host" != "$target" ] && continue
	r="$r"" ""$rhost"
 done

 case $(f_go_os) in
	raspbian)
	x="--localslots=1 --localslots_cpp=2"
	;;

	*)
	;;
 esac

 echo "$r"" localhost/"$(f_go_bproc)" $x" | \
	sed -e 's/^[[:space:]]\{1,\}//' -e 's/[[:space:]]\{1,\}$//'
}

###############################################################################
}
###############################################################################
